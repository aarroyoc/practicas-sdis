/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'aarroyoc' at '2/12/18 12:16 PM' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */
buildscript{
    repositories {
      mavenCentral()
    }
    dependencies {
      classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.google.protobuf:protobuf-java:3.0.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
}

task timeprinter_run(type:JavaExec) {
   main = "sdis.timeprinter.TimePrinter"
   classpath = sourceSets.main.runtimeClasspath
}

task cola_run(type:JavaExec) {
    main = "sdis.cola.Main"
    classpath = sourceSets.main.runtimeClasspath
}

task echo_run(type:JavaExec) {
    main = "sdis.echo.ServerEcho"
    classpath = sourceSets.main.runtimeClasspath
}

task tallerdos_run(type:JavaExec) {
    main = "protocol.Servidor.Servidor"
    classpath = sourceSets.main.runtimeClasspath
}

task rmi_server(type:JavaExec) {
    main = "sdis.rmi.Servidor"
    classpath = sourceSets.main.runtimeClasspath
}

task rmi_client(type:JavaExec) {
    main = "sdis.rmi.Cliente"
    classpath = sourceSets.main.runtimeClasspath
}

task caja_server(type:JavaExec) {
    main = "sdis.caja.Server"
    classpath = sourceSets.main.runtimeClasspath
}

task caja_guardar(type:JavaExec){
    main = "sdis.caja.ClienteGuardar"
    classpath = sourceSets.main.runtimeClasspath
}

task caja_leer(type:JavaExec){
    main = "sdis.caja.ClienteLeer"
    classpath = sourceSets.main.runtimeClasspath
}

task file_server(type:JavaExec){
    main = "sdis.file.server.RunFileServidor"
    classpath = sourceSets.main.runtimeClasspath
}

task file_client(type:JavaExec){
    main = "sdis.file.client.FileServerCliente"
    classpath = sourceSets.main.runtimeClasspath
}
